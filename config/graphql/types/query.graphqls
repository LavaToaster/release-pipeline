input BuildFilter {
    project: String
}

type Query {
    projects(after: String, first: Int = 10, last: Int): ProjectConnection!
    builds(after: String, first: Int = 10, last: Int, filter: BuildFilter): BuildConnection!
}

enum RunState {
    # Job has been created but not yet ran
    SUBMITTED
    # Job has been requested to be run, it's in the queue
    PENDING
    # Job is currently running
    IN_PROGRESS
    # Job has failed
    FAILED
    # Job was successful
    SUCCESSFUL
}

type Environment {
    id: String!
    name: String,
    project: Project
}

# Project Type
type Project {
    id: String!
    # Name of the project
    name: String
    codeBuildProjectName: String
    environments: [Environment]
}

type ProjectConnection {
    edges: [ProjectEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ProjectEdge {
    cursor: String!
    node: Project
}

type Build {
    id: String
    number: Int
    state: RunState
    project: Project
}

type BuildConnection {
    edges: [BuildEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type BuildEdge {
    cursor: String!
    node: Build
}
